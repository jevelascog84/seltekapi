const crypto = require('crypto');const jwt = require('jsonwebtoken');/*const Pool = require('pg').Pool;const pool = new Pool({	user: 'seltek_user',	host: 'seltekdb.c2ni2yxsqdjt.us-east-2.rds.amazonaws.com',	database: 'seltek',	password: '&kze^*bRVC1DqdbJg2lnLJFN1',	port: 5432,});*/var mysql = require('mysql');var pool = mysql.createConnection({	host: "162.241.74.187",	user: 'seltek_carmelita_user',	password: '3Ms1ZjBeR*e6GIXRg*LVMQihtJbYa',	database : 'seltek_carmelita'});pool.connect(function(err) {	if (err)	{		console.log(err);	}	else	{		console.log("Conectado");	}});const JWT_Secret = 'seltek@2020';/*const pool = new Pool({	user: 'seltek_user',	host: 'localhost',	database: 'seltek',	password: '&kze^*bRVC1DqdbJg2lnLJFN1',	port: 5432,});*/const getUsuariosBusqueda = (request, response) => {	const busqueda = "%"+request.params.busqueda+"%";	const pagina = parseInt(request.params.pagina);	const resultados = parseInt(request.params.resultados);	const orden = request.params.orden;	const inferior = resultados * (pagina - 1);	pool.query('SELECT usr_id, usr_nombres, usr_apellidos, rol_nombre, COUNT(1) OVER() AS conteo FROM usuarios usr LEFT JOIN roles rol ON usr.rol_id = rol.rol_id WHERE usr_nombres LIKE $1 OR usr_apellidos LIKE $1 OR rol_nombre LIKE $1 ORDER BY $2 LIMIT $3 OFFSET $4', [busqueda, orden, resultados, inferior], (error, results) => {	if (error) {		throw error	}	response.status(200).json(results)	})};const getUsuarios = (request, response) => {	pool.query('SELECT usr_id, usr_nombres, usr_apellidos, rol_nombre FROM usuarios usr LEFT JOIN roles rol ON usr.rol_id = rol.rol_id ORDER BY usr_id ASC', (error, results) => {	if (error) {		throw error	}	response.status(200).json(results)	})};const getRoles = (request, response) => {	pool.query('SELECT * FROM roles ORDER BY rol_id ASC', (error, results) => {	if (error) {		throw error	}	response.status(200).json(results)	})};const getUsuarioId = (request, response) => {	const id = parseInt(request.params.id);	pool.query('SELECT usr_nombres, usr_apellidos, usr_email, usr.rol_id, rol_nombre FROM usuarios usr INNER JOIN roles rol ON usr.rol_id = rol.rol_id WHERE usr_id = $1', [id], (error, results) => {	if (error) {		throw error	}	response.status(200).json(results.rows)	})};const getLogin = (request, response) => {	const email = request.params.email;	const password = request.params.password;	const cipher = crypto.createCipheriv("aes-256-cbc", "@Segur!d@d2o21@Seltek!0123456789", "@Bingeeks!C0dig0");	var password_encrypted = cipher.update(password, "utf-8", "hex");	password_encrypted += cipher.final("hex");		pool.query('SELECT usr_id, usr_nombres, usr_apellidos, rol_id, usr_token FROM usuarios WHERE usr_email = $1 AND usr_password = $2', [email, password_encrypted], (error, results) => {		if (error) 		{			response.status(200).json(-1);		}		else		{			if(results.rows.length > 0)			{				const cipher = crypto.createCipheriv("aes-256-cbc", "@Segur!d@d2o21@Seltek!0123456789", "@Bingeeks!C0dig0");				var usr_id = results.rows[0].usr_id;				var token = jwt.sign(results.rows[0].usr_id, JWT_Secret);				pool.query('INSERT INTO usuarios_token (usr_id, ust_token) VALUES ($1, $2)', [usr_id, token], (error2, results2) => {					if (error2) 					{						response.status(200).json(-2);					}					else					{						results.rows[0].usr_token = token;						response.status(200).json(results.rows);					}				})			}			else			{				response.status(200).json(results.rows);			}					}	})};const generarUsuarios = (request, response) => {	for(var i=1000; i<10000; i++)	{		var usr_nombres = "Jaime"+i;		var usr_apellidos = "Velasco"+i;		var usr_email = "jevelascog84@gmail.com"+i;		var usr_password = "123456789"+i;		var rol_id = 1;		const cipher = crypto.createCipheriv("aes-256-cbc", "@Segur!d@d2o21@Seltek!0123456789", "@Bingeeks!C0dig0");		var password_encrypted = cipher.update(usr_password, "utf-8", "hex");		password_encrypted += cipher.final("hex");		pool.query('INSERT INTO usuarios (usr_nombres, usr_apellidos, usr_email, usr_password, rol_id) VALUES ($1, $2, $3, $4, $5) RETURNING usr_id', [usr_nombres, usr_apellidos, usr_email, password_encrypted, rol_id],  (error, results) => {		if (error) {			throw error		}			//response.status(201).json(results.rows[0].usr_id)		})	}							};const getLoginToken = (request, response) => {	const token = request.params.token;	jwt.verify(token, JWT_Secret, (err, decoded) => {      		if (err) 		{			return res.json({ mensaje: 'Token invÃ¡lida' });    		} 		else 		{			pool.query('SELECT usr_id, usr_nombres, usr_apellidos, rol_id FROM usuarios WHERE usr_id = $1', [parseInt(decoded)], (error, results) => {				if (error) 				{					response.status(200).json(-1);				}				else				{					response.status(200).json(results.rows);				}			})		}	});			};const newUsuario = (request, response) => {	const { usr_nombres, usr_apellidos, usr_email, usr_password, rol_id } = request.body;	pool.query('SELECT COUNT(1) AS conteo FROM usuarios WHERE usr_email = $1', [usr_email], (error, results) => {		if (error) 		{			throw error		}		else		{			if(results.rows[0]['conteo'] > 0)				response.status(200).json(0);			else			{				const cipher = crypto.createCipheriv("aes-256-cbc", "@Segur!d@d2o21@Seltek!0123456789", "@Bingeeks!C0dig0");				var password_encrypted = cipher.update(usr_password, "utf-8", "hex");				password_encrypted += cipher.final("hex");				pool.query('INSERT INTO usuarios (usr_nombres, usr_apellidos, usr_email, usr_password, rol_id) VALUES ($1, $2, $3, $4, $5) RETURNING usr_id', [usr_nombres, usr_apellidos, usr_email, password_encrypted, rol_id],  (error, results) => {				if (error) {					throw error				}				response.status(201).json(results.rows[0].usr_id)				})			} 		}	});};const editUsuario = (request, response) => {	const id = parseInt(request.params.id);	const { usr_nombres, usr_apellidos, usr_email, usr_password, rol_id } = request.body;	if([usr_password] == "" || [usr_password] == undefined)	{		pool.query('UPDATE usuarios SET usr_nombres=$1, usr_apellidos=$2, usr_email=$3, rol_id=$4 WHERE usr_id = $5', [usr_nombres, usr_apellidos, usr_email, rol_id, id],  (error, results) => {			if (error) {				throw error			}			response.status(200).json(`User modified with ID: ${id}`)		})		}	else 	{		pool.query('UPDATE usuarios SET usr_nombres=$1, usr_apellidos=$2, usr_email=$3, usr_password=$4, rol_id=$5 WHERE usr_id = $6', [usr_nombres, usr_apellidos, usr_email, usr_password, rol_id, id],  (error, results) => {		if (error) {			throw error		}		response.status(200).json(`User modified with ID: ${id}`)		})	}};const delUsuarioId = (request, response) => {		const id = parseInt(request.params.id);	pool.query('DELETE FROM usuarios WHERE usr_id = $1', [id], (error, results) => {	if (error) {		throw error	}	response.status(200).json(`User deleted with ID: ${id}`)	})};module.exports = {	getUsuarios,	getUsuariosBusqueda,	getUsuarioId,	newUsuario,	editUsuario,	delUsuarioId,	getRoles,	getLogin,	getLoginToken,	generarUsuarios}